<?php
/*
   ----------------------------------------------------------
   Plugin Procedimientos 2.2.1
   GLPI 0.85.5
  
   Autor: Elena Martínez Ballesta.
   Fecha: Septiembre 2016

   ----------------------------------------------------------
 */

function plugin_procedimientos_checkForms () {
	
	Global $DB;
	
	$query = "SELECT state FROM glpi_plugins WHERE name='Forms' or name ='Formularios';";
	$result = $DB->query($query);
	$row = $DB->fetch_array($result);
	$estado= $row[0];
	if ((isset($estado))&&($estado == 1)){
		return true;
	} else {
		return false;
	}
}	
 
function get_procedimientos_publicos() {
	
	Global $DB;
	
	$publicos = array();
	$query = "SELECT 
			`glpi_plugin_procedimientos_procedimientos`.`id` 
			FROM `glpi_plugin_procedimientos_procedimientos`
			WHERE `glpi_plugin_procedimientos_procedimientos`.`id` 
			not in (select distinct `plugin_procedimientos_procedimientos_id`  from `glpi_plugin_procedimientos_procedimientos_groups`);";
	$result = $DB->query($query);
	
	foreach ($DB->request($query) as $data) {  // Para cada tarea del proyecto
		array_push($publicos, $data['id']);
	}
	return($publicos);
}	 
 
 
function getLineasProcedimiento($procedimientos_id) { //Devuelve un array con los número de linea de los elementos del procedimiento
	global $DB;
	
	$lineas = array(); // Array con las lineas que forman parte de un procedimiento.
	array_push($lineas,'---'); 
	
	$query = "SELECT line FROM glpi_plugin_procedimientos_procedimientos_items
			  where plugin_procedimientos_procedimientos_id=".$procedimientos_id.";";
	$result=$DB->query($query);
	$num_rows = $DB->numrows($result);
	
	if ($num_rows > 0){
		while ($row = $DB->fetch_array($result)) {
			array_push($lineas,$row['line']); 
		}
	} else {
		array_push($lineas, 0); 
	}
	return $lineas;			
}

function getItemsForProcedimiento($procedimientos_id, $entities_id) {
      global $DB;

      $items = array();

      $query = "SELECT DISTINCT `itemtype`
                FROM `glpi_plugin_procedimientos_procedimientos_items`
                WHERE `glpi_plugin_procedimientos_procedimientos_items`.`plugin_procedimientos_procedimientos_id` = '$procedimientos_id'
                ORDER BY `itemtype`";

      $result = $DB->query($query);
      $number = $DB->numrows($result);

      $data    = array();
      $totalnb = 0;
      for ($i=0 ; $i<$number ; $i++) {
         $itemtype = $DB->result($result, $i, "itemtype");
         if (!($item = getItemForItemtype($itemtype))) {
            continue;
         }
         $itemtable = getTableForItemType($itemtype);
         $query     = "SELECT `$itemtable`.*,
                              `glpi_plugin_procedimientos_procedimientos_items`.`id` AS IDD,
							  `glpi_plugin_procedimientos_procedimientos_items`.`line` AS linea,
							  `glpi_plugin_procedimientos_procedimientos_items`.`plugin_procedimientos_procedimientos_id` AS procedimientos_id
                        FROM `glpi_plugin_procedimientos_procedimientos_items`,
                              `$itemtable`";
         $query .= " WHERE `$itemtable`.`id` = `glpi_plugin_procedimientos_procedimientos_items`.`items_id`
                           AND `glpi_plugin_procedimientos_procedimientos_items`.`itemtype` = '$itemtype'
                           AND `glpi_plugin_procedimientos_procedimientos_items`.`plugin_procedimientos_procedimientos_id` = '$procedimientos_id' ORDER BY `linea`";
		
        $result_linked = $DB->query($query);
        $nb            = $DB->numrows($result_linked);

         while ($objdata = $DB->fetch_assoc($result_linked)) {
		   $items[$objdata['linea']][$itemtype] = $objdata;
        }
     }
	  ksort($items); // Ordeno la tabla con los elementos del procedimiento por el campo número de linea 
	  return $items;
   }
 
function instancia_procedimiento($procedimientos_id, $tickets_id){ // Crea registro de los pasos de un procedimiento en un ticket
	global $DB;
	
		// Seleccionamos los elementos que forman parte del procedimiento
		$query = "select * from glpi_plugin_procedimientos_procedimientos_items
				  where plugin_procedimientos_procedimientos_id=".$procedimientos_id." order by `line`;";
		$result = $DB->query($query);
		//echo "<br>Instancia: ".$query;
		while ($data = $DB->fetch_assoc($result)) {			
			$query = "INSERT INTO glpi_plugin_procedimientos_procedimientos_tickets 
					 (plugin_procedimientos_procedimientos_id, tickets_id, line, itemtype, items_id, state)
					  VALUES (".$procedimientos_id.",".$tickets_id.",".$data['line'].",'".$data['itemtype']."',".$data['items_id'].",0)";
			$DB->query($query);
			
			if ($data['itemtype'] == 'PluginProcedimientosProcedimiento'){ // Procedimiento anidado
					instancia_procedimiento($data['items_id'], $tickets_id);	
			}		
		}	
        Toolbox::logInFile("procedimientos", "Procedimiento con ID ".$procedimientos_id." Instanciado para el ticket con ID ".$tickets_id. "\n");		
}

function nameItemtype ($itemtype){
   switch ($itemtype) {
      case 'PluginProcedimientosMarcador' :
            return('Marcador');
      case 'PluginProcedimientosAccion' :
            return('Acci&oacute;n');
	  case 'PluginProcedimientosCondicion' :
            return('Condici&oacute;n');
	  case 'PluginProcedimientosSalto' :
            return('Salto');			
      case 'PluginProcedimientosProcedimiento' :
            return('Procedimiento');
      case 'PluginProcedimientosLink' :
            return('Enlace');			
   }			
}

// Renumera las líneas de un procedimiento para que sean consecutivas.
function renumerar_procedimiento($procedimientos_id){
	global $DB;
	
	$select = "SELECT * FROM `glpi_plugin_procedimientos_procedimientos_items`
			  where plugin_procedimientos_procedimientos_id=".$procedimientos_id." order by `line` ASC;";
	$result = $DB->query($select);
	$linea = 1;
	$lineas_originales = array();
	$lineas_nuevas = array();
	// Renumera las lineas del procedimiento (1,2,3...)
	if ($DB->numrows($result)){
		while ($item = $DB->fetch_array($result)){
			//echo "<br>-------------------------<br>";
			//echo "<br>Elemento a actualizar<br>";
			//print_r($item);
			array_push($lineas_originales,$item['line']); 
			array_push($lineas_nuevas,$linea);
			$update_linea = "update `glpi_plugin_procedimientos_procedimientos_items` set `line`='".$linea."' where `id`='".$item['id']."';";
			//echo "SQL:".$update_linea;
			$result_update = $DB->query($update_linea);		
			$linea = $linea +1;				
		}
	}
	
	// Actualiza condiciones.
	$select = "Select `glpi_plugin_procedimientos_condicions`.* from `glpi_plugin_procedimientos_procedimientos_items`
			  inner join `glpi_plugin_procedimientos_condicions` on (`glpi_plugin_procedimientos_condicions`.`id`=`glpi_plugin_procedimientos_procedimientos_items`.`items_id`)
			  where `glpi_plugin_procedimientos_procedimientos_items`.`itemtype`='PluginProcedimientosCondicion' 
			  and `glpi_plugin_procedimientos_procedimientos_items`.`plugin_procedimientos_procedimientos_id`='".$procedimientos_id."'";
	$result = $DB->query($select);
	if ($DB->numrows($result)){
		while ($cond = $DB->fetch_array($result)){ // Para cada condición que se encuentra
		
			// Renumera way_yes
			if (in_array($cond['way_yes'], $lineas_originales)) {
				$clave = array_search($cond['way_yes'], $lineas_originales); 
				$cond['way_yes'] = $lineas_nuevas[$clave];					
			}
			// Renumera way_no
			if (in_array($cond['way_no'], $lineas_originales)) {
				$clave = array_search($cond['way_no'], $lineas_originales); 
				$cond['way_no'] = $lineas_nuevas[$clave];
			}
			// Actualiza condición.
			$update = "Update `glpi_plugin_procedimientos_condicions` SET `comment`='Respuesta <strong>Si</strong>, ir a #linea: <strong>".$cond['way_yes']."</strong><BR>Respuesta <strong> No</strong>, ir a #linea: <strong>".$cond['way_no']."</strong>', 
						`way_no`='".$cond['way_no']."',
						`way_yes`='".$cond['way_yes']."'						
						WHERE `id`='".$cond['id']."';";			
			$DB->query($update);			
		}
	}	
	// Actualiza saltos de linea
	$select = "Select `glpi_plugin_procedimientos_saltos`.* from `glpi_plugin_procedimientos_procedimientos_items`
			  inner join `glpi_plugin_procedimientos_saltos` on (`glpi_plugin_procedimientos_saltos`.`id`=`glpi_plugin_procedimientos_procedimientos_items`.`items_id`)
			  where `glpi_plugin_procedimientos_procedimientos_items`.`itemtype`='PluginProcedimientosSalto' 
			  and `glpi_plugin_procedimientos_procedimientos_items`.`plugin_procedimientos_procedimientos_id`='".$procedimientos_id."'";
	//echo "<br>Select salto:".$select."<br>";
	$result = $DB->query($select);
	if ($DB->numrows($result)){
		while ($salto = $DB->fetch_array($result)){ // Para cada salto que se encuentra
			//echo "<br>Datos del salto: ";
			//print_r($salto);
			// Renumera goto
			if (in_array($salto['goto'], $lineas_originales)) {
				$clave = array_search($salto['goto'], $lineas_originales); 
				$salto['goto'] = $lineas_nuevas[$clave];

				// Actualiza salto
				$update = "Update `glpi_plugin_procedimientos_saltos` SET `comment`='Ir a #linea: <strong>".$salto['goto']."</strong>', 
						`goto`='".$salto['goto']."'					
					   WHERE `id`='".$salto['id']."';";	
				//echo "<br>Select update:".$update."<br>";					   
				$DB->query($update);
			}				
		}
	}
}

function icono_estado($estado){
	   switch ($estado){
		   case 0:  return "<img title='Item Pendiente' src='../plugins/procedimientos/imagenes/check_off.png' />";
					break;
		   case 1:  return "<img title='Item Ejecutado' src='../plugins/procedimientos/imagenes/check.png' />";
					break;					   
		   case 2:  return "<img title='Item Actual' src='../plugins/procedimientos/imagenes/actual.png' />";
					break;
		   case 3:  return "<img title='Item No operativo' src='../plugins/procedimientos/imagenes/error.png' />";
					break;						
	   }
}

// Devuelve el ID del procedimiento principal (el que se ha seleccionado en el ticket)
function get_procedimiento_principal($tickets_id){
	global $DB;
	
	$select_procedimiento = "SELECT DISTINCT `plugin_procedimientos_procedimientos_id`
							FROM `glpi_plugin_procedimientos_procedimientos_tickets`
							where `tickets_id`='".$tickets_id."' and `plugin_procedimientos_procedimientos_id` not in
							(Select `items_id`
								FROM `glpi_plugin_procedimientos_procedimientos_tickets`
								where `tickets_id`='".$tickets_id."' and `itemtype`='PluginProcedimientosProcedimiento')";
	
	$result_procedimiento = $DB->query($select_procedimiento);
	$data = $DB->fetch_array($result_procedimiento);
	return ($data['plugin_procedimientos_procedimientos_id']);
								
}

// Devuelve TRUE si el procedimiento $procedimientos_id ha sido ejecutado completamente en el ticket $tickets_id
function procedimiento_finalizado($tickets_id, $procedimientos_id){
	global $DB;

	$select_fin = "SELECT id FROM `glpi_plugin_procedimientos_procedimientos_tickets`
							where `tickets_id`='".$tickets_id."' 
							and `plugin_procedimientos_procedimientos_id`='".$procedimientos_id."'
							and `itemtype`='PluginProcedimientosMarcador'
							and `items_id`='2'
							and `state`=1;";
							
	$result_fin = $DB->query($select_fin);
	$data = $DB->fetch_array($result_fin);
	
	if (isset($data['id'])){
		return true;
	} else {
		return false;
	}											
}

function get_estado($id){	
	$proc_ticket = new PluginProcedimientosProcedimiento_Ticket();
	$proc_ticket->getFromDB($id);

	$state = $proc_ticket->fields['state'];
	return ($state);
}

function ejecutar_Procedimiento($tickets_id) {
	global $DB;
	
	$procedimiento_principal = get_procedimiento_principal($tickets_id);
	
	$select_items = "Select *
					from `glpi_plugin_procedimientos_procedimientos_tickets`
					where `tickets_id`='".$tickets_id."' order by id;";
	$result_items = $DB->query($select_items);
	$number_items = $DB->numrows($result_items);
	
	if (procedimiento_finalizado($tickets_id, $procedimiento_principal) == false) {
		// Ticket con procedimiento instanciado.
		if ($number_items > 0) {
			$continua = true;
			
			while (($item = $DB->fetch_array($result_items)) && ($continua == true)) {
				$id_registro = $item['id'];
				$procedimientos_id = $item['plugin_procedimientos_procedimientos_id'];
				$line = $item['line'];
				$itemtype = $item['itemtype'];
				$items_id = $item['items_id'];
				// El estado puede cambiar durante la ejecución, se consulta de la tabla del elemento.
				$state = get_estado($id_registro);
				if ($state == 0){ // Si el paso del procedimiento NO se ha ejecutado AÚN
					
					// TRATAMIENTO MARCADOR
					if ($itemtype == 'PluginProcedimientosMarcador'){ // Lo marca "ejecutado" y pasa siguiente registro.
						//echo "<BR>Marcador<BR>";										
						$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`=1 WHERE id=".$id_registro.";";
						$result_update = $DB->query($update);
						
						// Si se trata de una marca de fin dentro del procedimiento principal en ejecución.
						// Debe parar el procedimiento.
						if ($item['items_id']==2){	
							if ($procedimientos_id == $procedimiento_principal){
								$continua = false; 
Html::redirect(Toolbox::getItemTypeFormURL('Ticket') . "/front/ticket.form.php?id=".$tickets_id."&forcetab=Ticket$2");					
							}	
						}
                        Toolbox::logInFile("procedimientos", "TRATAMIENTO MARCADOR: Actualizado Marcador. Estado = 1 en el registro ".$id_registro. "\n");	
					
					// TRATAMIENTO DE ACCIONES				
					} else if ($itemtype == 'PluginProcedimientosAccion'){ 
						$select_accion = "SELECT *  FROM glpi_plugin_procedimientos_accions WHERE ID = ".$items_id.";";
						$result_accion = $DB->query($select_accion);
						$accion = $DB->fetch_array($result_accion);
						if (isset($accion)) {
							$nombre = $accion['name'];
							$descripcion = $accion['comment'];
							$tipo = $accion['plugin_procedimientos_tipoaccions_id'];
							$is_deleted = $accion['is_deleted'];						
						}
						// SOLO TRATA ACCIONES QUE NO ESTAN EN LA PAPELERA
						if ($is_deleted == 0){ 					
							// Tipo TAREA: crea la tarea, la inserta en el ticket, lo marca "ejecutado" y para la ejecución.
							if ($tipo == 1){							
								$select_tarea = "Select * from `glpi_plugin_procedimientos_accions` left join `glpi_plugin_procedimientos_tareas` 
											on (`glpi_plugin_procedimientos_tareas`.plugin_procedimientos_accions_id = `glpi_plugin_procedimientos_accions`.id ) 
											where `glpi_plugin_procedimientos_accions`.id = ".$items_id.";";
								
								$result_tarea = $DB->query($select_tarea);
								$accion_tarea = $DB->fetch_array($result_tarea);					
					
								$tarea = new TicketTask();
																
								$input["tickets_id"]=$tickets_id;	
								$content_task = addslashes($accion_tarea["comment"]);
								$input["content"]= $content_task;
								$input["users_id"]=Session::getLoginUserID();
								$input["is_private"]=1;
								// Adaptación 0.90.1
								if ((isset($accion_tarea["taskcategories_id"]))&&($accion_tarea["taskcategories_id"]>0)){
									$input["taskcategories_id"]=$accion_tarea["taskcategories_id"];
								} else {
									$input["taskcategories_id"]=0;
								}
								// Fin
								$input['state'] = 1;
								$input['users_id_tech'] = 0;
								$input['actiontime'] =0;
								if (isset($input["id"])){
									unset($input["id"]);
								}
								$instancia_id = $tarea->add($input);
								$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='2', `instancia_id`='".$instancia_id."' WHERE `id`='".$id_registro."';";
								$result_update = $DB->query($update);
								//echo "<BR>Espero a que la tarea se realice<BR>";
								$continua = false;						
                                Toolbox::logInFile("procedimientos", "TRATAMIENTO ACCIONES: Insertada Tarea con ID ".$instancia_id.". Estado = 2 en el registro ".$id_registro. "\n");									
							}						
							// Tipo ESCALADO: toma los datos del escalado, modifica el ticket, lo marca ejecutado y continua
							else if ($tipo == 2){							
								$select_escalado = "Select * from `glpi_plugin_procedimientos_accions`
									 inner join `glpi_plugin_procedimientos_escalados` on (`glpi_plugin_procedimientos_escalados`.plugin_procedimientos_accions_id = `glpi_plugin_procedimientos_accions`.id )
									 where `glpi_plugin_procedimientos_accions`.id = ".$items_id.";";							
								$result_escalado = $DB->query($select_escalado);
								$accion_escalado = $DB->fetch_array($result_escalado);												
	       
								$ticket = new Ticket;

								if($accion_escalado['groups_id_observ']!=0){ 
									$input_itil_observer_g = array();
									$input_itil_observer_g['id'] = $tickets_id;							
                                    $input_itil_observer_g['_itil_observer'] = array (
                                             '_type' => 'group',
                                             'groups_id'=>$accion_escalado['groups_id_observ']
                                    );
									$ticket->update($input_itil_observer_g);
								} 
								if($accion_escalado['groups_id_asignado']!=0){
									$input_itil_assign_g = array();
									$input_itil_assign_g['id'] = $tickets_id;									
                                    $input_itil_assign_g['_itil_assign'] = array (
                                            '_type' => 'group',
                                            'groups_id'=>$accion_escalado['groups_id_asignado']
                                     );
									 $ticket->update($input_itil_assign_g);
								}                                                                               
								if($accion_escalado['users_id_asignado']!=0){
									$input_itil_assign_u = array();
									$input_itil_assign_u['id'] = $tickets_id;								
                                    $input_itil_assign_u['_itil_assign'] = array (
											'_type' => 'user',
											'users_id'=>$accion_escalado['users_id_asignado'],
											'use_notification'=>0,
											'alternative_email' =>''
									); 
									$ticket->update($input_itil_assign_u);									
								}
								if($accion_escalado['users_id_observ']!=0){
									$input_itil_observer_u = array();
									$input_itil_observer_u['id'] = $tickets_id;
                                    $input_itil_observer_u['_itil_observer'] = array (
                                           '_type' => 'user',
                                           'users_id'=>$accion_escalado['users_id_observ'],
                                           'use_notification'=>0,
                                           'alternative_email' =>''                                                                                                                                              
                                    ); 
									$ticket->update($input_itil_observer_u);									
								}							
							
								$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='1' WHERE `id`='".$id_registro."';";
								$result_update = $DB->query($update);															
                                Toolbox::logInFile("procedimientos", "TRATAMIENTO ACCIONES: Insertado Escalado. Estado = 1 en el registro ".$id_registro. "\n");									
							}						
							// Tipo MODIFICACIÓN TICKET:
							else if ($tipo == 3) {
								$select_modify = "Select * from `glpi_plugin_procedimientos_accions`
									 inner join `glpi_plugin_procedimientos_updatetickets` on (`glpi_plugin_procedimientos_updatetickets`.plugin_procedimientos_accions_id = `glpi_plugin_procedimientos_accions`.id )
									 where `glpi_plugin_procedimientos_accions`.id = ".$items_id.";";							
								$result_modify = $DB->query($select_modify);
								$accion_modify = $DB->fetch_array($result_modify);
							
								$ticket = new Ticket();
								$ticket-> getFromDB($tickets_id);
								$estado_ticket = $ticket->fields['status'];
								$requesttypes_id_ticket = $ticket->fields['requesttypes_id'];
								$itilcategories_id_ticket = $ticket->fields['itilcategories_id'];
								$type_ticket = $ticket->fields['type'];
								$slts_ttr_id_ticket = $ticket->fields['slts_ttr_id'];
								$input = array();
								$input['id'] = $tickets_id;
							
								if ((isset($accion_modify['status'])) && 
									($accion_modify['status']!== $estado_ticket)&&($accion_modify['status']>0)){ // El estado tiene valor y es distinto del estado del ticket
									$input['status'] = $accion_modify['status'];
								} 
								if ((isset($accion_modify['requesttypes_id'])) && 
									($accion_modify['requesttypes_id']!== $requesttypes_id_ticket)&&($accion_modify['requesttypes_id']>0)){ // El requesttypes_id tiene valor y es distinto del requesttypes_id del ticket
									$input['requesttypes_id'] = $accion_modify['requesttypes_id'];
								}
								if ((isset($accion_modify['itilcategories_id'])) && 
									($accion_modify['itilcategories_id']!== $itilcategories_id_ticket )&&($accion_modify['itilcategories_id']>0)){ // El itilcategories_id tiene valor y es distinto del itilcategories_id del ticket
									$input['itilcategories_id'] = $accion_modify['itilcategories_id'];
								}
								if ((isset($accion_modify['type'])) && 
									($accion_modify['type']!== $type_ticket)&&($accion_modify['type']>0)){ // El type tiene valor y es distinto del type del ticket
									$input['type'] = $accion_modify['type'];
								}
								if ((isset($accion_modify['slts_ttr_id'])) && 
									($accion_modify['slts_ttr_id']!== $slts_ttr_id_ticket )&&($accion_modify['slts_ttr_id']>0)){ // El slas_id tiene valor y es distinto del slas_id del ticket
									$input['slts_ttr_id'] = $accion_modify['slts_ttr_id'];
								}
								$ticket->update($input);

								if ((isset($accion_modify['solutiontemplates_id']))&&($accion_modify['solutiontemplates_id']>0)){ // Tiene una plantilla de solución asignada.
									$ticket2 = new Ticket();
									$ticket2-> getFromDB($tickets_id);
									$input2 = array();
								       $input2['id'] = $tickets_id;
									
									
									$template = new SolutionTemplate();
									$template->getFromDB($accion_modify['solutiontemplates_id']);								
									$input2['solution'] = addslashes($template->getField('content')); // INFORGES - emb97m - 29-09-2017 - Tratamiento del texto de solución de la plantilla.
									$input2['solutiontypes_id'] = $template->getField('solutiontypes_id');
									$input2['solutiontemplates_id'] = $accion_modify['solutiontemplates_id'];
									$input2['_solve_to_kb'] = 0;
									$input2['status'] = 5;							
									$ticket2->update($input2);
								}
								
								$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='1' WHERE `id`='".$id_registro."';";
								$result_update = $DB->query($update);								
								Toolbox::logInFile("procedimientos", "TRATAMIENTO ACCIONES: Actualizado ticket. Estado = 1 en el registro ".$id_registro. "\n");									
							}						
							// Tipo SEGUIMIENTO
							else if ($tipo == 4){
								$select_followup = "Select * from `glpi_plugin_procedimientos_accions`
									 inner join `glpi_plugin_procedimientos_seguimientos` on (`glpi_plugin_procedimientos_seguimientos`.plugin_procedimientos_accions_id = `glpi_plugin_procedimientos_accions`.id )
									 where `glpi_plugin_procedimientos_accions`.id = ".$items_id.";";							
								$result_followup = $DB->query($select_followup);
								$accion_followup = $DB->fetch_array($result_followup);												
	       							
								$fup = new TicketFollowup();
								$input = array();
								$input['tickets_id'] = $tickets_id;
								$input['users_id'] = Session::getLoginUserID();
								$input['content']= $accion_followup['content'];
								$input['is_private']= $accion_followup['is_private'];
								$input['requesttypes_id']= $accion_followup['requesttypes_id'];							
								// Solo en la CARM existe este campo
								$input['followuptypes_id']= $accion_followup['followuptypes_id'];
							
								$instancia_id = $fup->add($input);
							
								$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='1', `instancia_id`='".$instancia_id."' WHERE `id`='".$id_registro."';";
								$result_update = $DB->query($update);								
                                Toolbox::logInFile("procedimientos", "TRATAMIENTO SEGUIMIENTO: Insertado seguimiento con ID ".$instancia_id.". Estado = 1 en el registro ".$id_registro. "\n");									
							}
							// Tipo VALIDACIÓN
							else if ($tipo == 5){
								$select_validation = "Select * from `glpi_plugin_procedimientos_accions`
									 inner join `glpi_plugin_procedimientos_validacions` on 
									 (`glpi_plugin_procedimientos_validacions`.plugin_procedimientos_accions_id = `glpi_plugin_procedimientos_accions`.id )
									 where `glpi_plugin_procedimientos_accions`.id = ".$items_id.";";							
								$result_validation = $DB->query($select_validation);											
	       						
								while ($row_val = $DB->fetch_array($result_validation)) {							
									$val = new TicketValidation();
									$input = array();
									$input['tickets_id'] = $tickets_id;
									$input['users_id'] = Session::getLoginUserID();
									$input['comment_submission']= $row_val['comment_submission'];
									$input['users_id_validate']= $row_val['users_id_validate'];						
								
									$val->add($input);
								}
								$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='1' WHERE `id`='".$id_registro."';";
								$result_update = $DB->query($update);									
                                Toolbox::logInFile("procedimientos", "TRATAMIENTO VALIDACION: Insertada validacion. Estado = 1 en el registro ".$id_registro. "\n");																	
							}									
						} else {
							$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='3' WHERE `id`='".$id_registro."';";
							$result_update = $DB->query($update);							
						}				
					}
					// TRATAMIENTO DE CONDICIONES			
					else if ($itemtype == 'PluginProcedimientosCondicion'){
						//echo "<BR>Condicion<BR>";
						$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='2' WHERE `id`='".$id_registro."';";
						$result_update = $DB->query($update);					
						$continua = false;
					} 
					// TRATAMIENTO DE SALTOS		
					else if ($itemtype == 'PluginProcedimientosSalto'){
						$select_salto = "SELECT *  FROM glpi_plugin_procedimientos_saltos WHERE ID = ".$items_id.";";
						$result_salto = $DB->query($select_salto);
						$salto = $DB->fetch_array($result_salto);
						if (isset($salto['goto'])) {											
							if ($salto['goto'] < $line){
								/*$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='0' WHERE `id`='".$id_registro."';";
								$result_update = $DB->query($update);*/
                                Toolbox::logInFile("procedimientos", "TRATAMIENTO SALTOS: reset_camino_salto_atras. Procedimiento ".$procedimientos_id. "
								                    , ticket ".$tickets_id.", salto ".$salto['goto'].", linea ".$line."\n");									
								reset_camino_salto_atras($procedimientos_id , $tickets_id, $salto['goto'], $line);
							} else if ($salto['goto'] > $line){
								$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='1', 
										  `instancia_id`='".$salto['comment']."' WHERE `id`='".$id_registro."';";
								$result_update = $DB->query($update);							
                                Toolbox::logInFile("procedimientos", "TRATAMIENTO SALTOS: reset_camino_salto_adelante. Procedimiento ".$procedimientos_id. "
								                    , ticket ".$tickets_id.", salto ".$salto['goto'].", linea ".$line."\n");	
									reset_camino_salto_adelante($procedimientos_id , $tickets_id, $salto['goto'], $line);
							}
							$continua = false;
						}						
						
					// TRATAMIENTO DE PROCEDIMIENTOS ANIDADOS
					} else if ($itemtype == 'PluginProcedimientosProcedimiento'){
						$select_proc = "SELECT *  FROM glpi_plugin_procedimientos_procedimientos WHERE ID = ".$items_id.";";
						if ($_SESSION['glpi_use_mode'] == 2) {	
							echo "<br>Select_proc:".$select_proc;
						}
						$result_proc = $DB->query($select_proc);
						$proc = $DB->fetch_array($result_proc);
						if (isset($proc)) {
							if ($_SESSION['glpi_use_mode'] == 2) {	
								echo "<br>procedimiento:";
								print_r($proc);
							}
							$nombre = $proc['name'];
							$descripcion = $proc['comment'];
							$active = $proc['active'];
							$is_deleted = $proc['is_deleted'];						
						}						
						// SOLO TRATA PROCEDIMIENTOS QUE NO ESTAN EN LA PAPELERA
						if (($is_deleted == 0) && ($active == 1)){ 	
							$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='1' WHERE `id`='".$id_registro."';";
							if ($_SESSION['glpi_use_mode'] == 2) {	
								echo "<br>Procedimiento activo y disponible";
							}
							$result_update = $DB->query($update);
							//Actualizamos el histórico 
							$message = "Ejecutar '".$nombre."'";
							$insert_logs = "INSERT INTO glpi_logs (itemtype,itemtype_link, items_id, linked_action, user_name, date_mod, new_value) 
								VALUES ('Ticket','PluginProcedimientosProcedimiento', '".$tickets_id."', '18', '".getUserName($_SESSION['glpiID'])."', 
								NOW(),'".$message."')";
							$result = $DB->query($insert_logs);		
							
						} else {
							if ($_SESSION['glpi_use_mode'] == 2) {	
								echo "<br>Procedimiento no activo o en la papelera";
							}
							$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='3' WHERE `id`='".$id_registro."';";
							$result_update = $DB->query($update);
							
							$update_proc_delete = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='3'
								WHERE `plugin_procedimientos_procedimientos_id`='".$items_id."'
								and `tickets_id`= '".$tickets_id."';";								
							$result_proc_delete = $DB->query($update_proc_delete);								
						}						
					}
					// TRATAMIENTO DE ENLACES		
					else if ($itemtype == 'PluginProcedimientosLink'){
						//echo "<BR>Enlaces<BR>";
						$select_link = "SELECT *  FROM glpi_plugin_procedimientos_links WHERE ID = ".$items_id.";";
						$result_link = $DB->query($select_link);
						$link = $DB->fetch_array($result_link);
						if (isset($link)) {
							$nombre = $link['name'];
							$url = $link['comment'];					
						}						
						$update = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='2' WHERE `id`='".$id_registro."';";
						$result_update = $DB->query($update);					
						$continua = false;
						//header ("Location: $url");
					} 					
				}
			}
		}
	}
}

function reset_camino_salto_adelante($procedimientos_id, $tickets_id, $way, $linea) {
	global $DB;
	
	// Para obtener el ID de las lineas que se han de poner en estado "saltadas" (ID1, ID2)
	$select_ID1 = "select `id`
				   FROM `glpi_plugin_procedimientos_procedimientos_tickets`
				   WHERE `plugin_procedimientos_procedimientos_id`='".$procedimientos_id."'
				   and `tickets_id`= '".$tickets_id."'
				   and line =".$linea.";";  	
	$results_ID1 = $DB->query($select_ID1 );	
	$elemento1 = $DB->fetch_array($results_ID1);
	$id1 = $elemento1['id'];

	$select_ID2 = "select `id`
				   FROM `glpi_plugin_procedimientos_procedimientos_tickets`
				   WHERE `plugin_procedimientos_procedimientos_id`='".$procedimientos_id."'
				   and `tickets_id`= '".$tickets_id."'
				   and line =".$way.";";   	
	$results_ID2 = $DB->query($select_ID2 );	
	$elemento2 = $DB->fetch_array($results_ID2);
	$id2 = $elemento2['id'];
	
	$update_estado = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='3'
					  WHERE `id`> '".$id1."' and `id`<'".$id2."'";
	$result_estado = $DB->query($update_estado);	
	ejecutar_Procedimiento($tickets_id);
}

function reset_camino_salto_atras($procedimientos_id, $tickets_id, $way, $linea) {
	global $DB;
	
	// Para obtener el ID de las lineas que se han de poner en estado "saltadas" ( >= ID2)
	$select_ID2 = "select `id`
				   FROM `glpi_plugin_procedimientos_procedimientos_tickets`
				   WHERE `plugin_procedimientos_procedimientos_id`='".$procedimientos_id."'
				   and `tickets_id`= '".$tickets_id."'
				   and line =".$way.";";   	
	$results_ID2 = $DB->query($select_ID2 );	
	$elemento2 = $DB->fetch_array($results_ID2);
	$id2 = $elemento2['id'];
	
	$update_estado = "UPDATE `glpi_plugin_procedimientos_procedimientos_tickets` SET `state`='0'
					  WHERE `id`>= '".$id2."' and `tickets_id`= '".$tickets_id."'";
	$result_estado = $DB->query($update_estado);	
    Toolbox::logInFile("procedimientos", "reset_camino_salto_atras. ".$select_ID2 . "\n".
								                    $update_estado. "\n");
	ejecutar_Procedimiento($tickets_id);
}

   /**
    * Dropdown of validator
    *
    * @param $options   array of options
    *  - name                    : select name
    *  - id                      : ID of object > 0 Update, < 0 New
    *  - entity                  : ID of entity
    *  - right                   : validation rights
    *  - groups_id               : ID of group validator
    *  - users_id_validate       : ID of user validator
    *  - applyto
    *
    * @return nothing (display)
   **/
   function dropdownValidator(array $options=array()) {
      global $CFG_GLPI;
	  
      $params['name']               = '';
      $params['id']                 = 0;
      $params['entity']             = $_SESSION['glpiactive_entity'];
      $params['right']              = array('validate_request', 'validate_incident');
      $params['groups_id']          = 0;
      $params['users_id_validate']  = array();
      $params['applyto']            = 'show_validator_field';

      foreach ($options as $key => $val) {
         $params[$key] = $val;
      }
	  if ((isset($params['groups_id']))&& ($params['groups_id']>0)){
			$types = array(0       => Dropdown::EMPTY_VALUE,
                     'user'  => __('User'),
                     'group' => __('Group'));			
			$type = 'group';
			$params['users_id_validate']['groups_id'] = $params['groups_id'];		
	  } else {
			$types = array(0       => Dropdown::EMPTY_VALUE,
                     'user'  => __('User'),
                     'group' => __('Group'));
			$type  = '';					 
	  }
      if (isset($params['users_id_validate']['groups_id'])) {
         $type = 'group';
      } else if (!empty($params['users_id_validate'])) {
         $type = 'user';
      }

      $rand = Dropdown::showFromArray("validatortype", $types, array('value' => $type));

      if ($type) {
         $params['validatortype'] = $type;
         Ajax::updateItem($params['applyto'], $CFG_GLPI["root_doc"]."/ajax/dropdownValidator.php",
                          $params);
      }
      $params['validatortype'] = '__VALUE__';
      Ajax::updateItemOnSelectEvent("dropdown_validatortype$rand", $params['applyto'],
                                    $CFG_GLPI["root_doc"]."/ajax/dropdownValidator.php", $params);

      if (!isset($options['applyto'])) {
         echo "<br><span id='".$params['applyto']."'>&nbsp;</span>\n";
      }
   }

?>
